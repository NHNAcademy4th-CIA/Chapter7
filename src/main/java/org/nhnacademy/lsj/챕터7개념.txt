Array Details

배열의 가장 큰 특징은 주소값이 묶여있어
예를들어 arr[0]의 주소가 100이라면 arr[1]은 101 arr[10]은 110이야
즉 arr의 시작주소 + index값 해주면 바로 찾기 가능함 

이런 경우를 random access가 가능하다고 말 합니다 
list의 경우에는 이렇지 않기 떄문에 sequencial access를 합니다.
다 훑어봐야해 바로 못찾고 

index = sequence의 위치 

배열은 한번 만들고 나면 공간할당을 바꿀수 없음 



For-each Loops

기존의 for문 
for(int i=0;i<10;i++) 이런식임 

여기서 for each  혹은 enhanced for 라고 하는 게 생김

for(Integer a:num)
이런식임 

이런경우 index사용으로 인한 복잡성을 줄일 수 있음 


for (BaseType item : itemArray) " 대신 " for (var item : itemArray)
이런식으로 var를 사용해 쓸 수도 있습니다.

var = C++ 의 auto느낌이다.

for each 가 다른점은 일반 for는 배열의 element에 접근한다. 가르키는 메모리위치
for each 는 배열의 value에만 접근한다. 즉 값에만 접근함


Variable Arity Methods

Arity(에리티) = 항수 = 함수 또는 연산이 취하는 독립변수의 개수 

public static double average( double...  numbers ) 
이런식으로 ... 찍어주면 여러개가 와도 된다.
1개도 2개도 10개도 가능함



 Array Literals


배열은 선언될떄 초기화 될 수 있음 

int[]arr ={1,2,3,4,5}; 이런식으로 

이런것을 배열 Literals이라 함 , 배열이 가진 값을 표현하기 위한 것 이니까 



Array Processing

배열은 크기가 정해져있음 , 따라서 정해놓은 크기 이상or이하에 접근하려하면 터진다
이걸 주의해서 건드려야 함 아니면 ArrayIndexOutOfBoundsException이 터짐

배열의 index 0번부터 시작하게 만들어서 생각보다 자주 터지니 주의
그럼 왜?? 1부터하면 직관적인데 0번부터 시작해?
그건 배열의 시작주소+index로 바로 찾을수 있게 만들라고 그런거임
0 1 2 3 4 5 라면
0+5로 5번쨰 index 주소값을 바로 찾기 가능

근데 
1 2 3 4 5 6 이면
1+6 하면 7이 나와버려 그래서 0부터 시작입니다.

같은 이유로arr[-5]이런 정수도 존재하지 않음  , arr[1.234]도 존재하지 않는다



그리고 배열은 삽입 삭제가 불편해
배열이 가득차면 어쩔 수 없이 새로운 배열을 만들어야 하고 
삭제한다음에 당겨주는 로직을 추가적으로 만들어줘야해 

Some Standard Array Methods

배열을 복사하는 메서드가 존재해

Arrays.copyOf(목록,lengthOfCopy)

그외에도 fill , toString , sort , binarySearch등등 내장 메서드가 존재해


ArrayList

이건 동적배열을 의미해
배열이랑 똑같음 사실 , 얘도 Random Access가능함 , 
근데 다른건 뭐다?? 동적이다 , 동적으로 크기를 변경할 수 있다.

ArrayList is a parameterized type

얘는 <T>로 타입을 받아 따라서 int , float , double , class 어떤거든 상관없이 
다 들어 올 수 있음 

근데 이 T parameter는 무조건 object여야 만 해 
Ex) class 이름 , interface 이름 등  , 따라서 primitive 는 포함되지 않아 

ArrayList<T>는 원래는 T 타입만 올 수 있다 . but 
우리는 subType관계가 깄으니 T를 상속시켜 subType 유형을 만들면
그것들 또한 T타입에 올 수 있다 ! 

이러한 List ,Map,Stack,Queue 등등... 이 모여서
Collection Framework를 만든다.


Wrapper Classes

앞서 말했듯이 Parameterized Type은 primitive가 올 수 없음 .
그럼 int list 못 만들어?? -> 아니?? -> int를 감싼 class  즉 wrapper 클래스를 쓰면 됨 

따라서 primitive Type의 wrapper 클래스 , Integer , Double , Float , Long , Short , Byte등
다영하게 있음 

얘들은 기본적으로 wrapper "클래스" , 클래스임으로 <T>타입에 올 수 있고 
다양한 메서드들도 가지고 있음 


근데 Integer 나 int 나 이것들 연산 시키고 섞고 값 넣고 하는데 다 됨
왜?? 타입 자체가 다른데 어떻게 가능한 거야 ??

그건 자바에서 자체적으로 Boxing , Unboxing 을 지원해주기 떄문임

이런것을 autoBoxing 이라 합니다 


Searching and Sorting

일반적으로 자료구조는 전부다 검색하고 정렬하려고 쓰는 거임 
자료구조 = 어떻게 하면 자료들을 쉽게 관리 할 수 있을까?? 라는 개념에서 시작된것임

대부분 목적이 비슷비슷해 , 단지 어떤게 find에 최적화 , 어떻게 add에 최적화
이런느낌인거야 

Searching

탐색에도 여려가지 있어

젤 쉬운건 그냥 for 돌리면 쉬움

for(int i=0;i<10;i++){
	if(num==arr[i]) 이런식으로 찾는거지
}

이런 방식을 Linear Search 라고 한다 . 근데 이건 O(n)시간이 걸려 , 느리다고 봐야지


정렬된 배열의 경우 Binary Search를 할 수 있음 , 이건 O(logN)만큼의 시간만 있으면
찾을수 있음 

가장 빠른건 Hash Search 이건 O(1) Map같은 경우에는 그냥 key값넣으면 바로 나오지
쌍으로 묶여있는건 이렇게 찾을 수 있어 

Association Lists
연관 리스트

검색의 일반적인 응용은 쌍으로 묶어버리는거야 

Key , Value값으로 말이지 , 그럼 Key값을 넣기만하면 내가 원하는 Value를 찾을 수 있게됨 

이런 연관리스트의 일환이 Map이야 Map<Key,Value> 그래서 이거 검색하는건
O(1) 매우 빠름  




Insertion Sort

삽입정렬 

삽입정렬은 말 그대로 정렬된 상태로 삽입시키겠다는 의미다.

정확히 말하면 n을 넣는다 하면 n보다 작은경우 넘어가고 n보다 큰 elements가 오는 경우 
거기다 삽입을 하는 방식이다.


Selection Sort
선택 정렬 

이거 버블정렬이랑 비슷한데 살짝 달라 , 이것도 시간복잡도는 O(N^2)임 
사실 엄밀히 따지면 버블정렬보다 빠르긴 해 얘는 (N)(N-1)/2 시간이니까 
확실히 빠르긴 함 

돌면서 가장 작은 elem 찾아 , 이걸 index0번쨰에 넣어
그 다음은 index1부터 가서 가장작은 elem찾아 , 이걸 index1번쨰에 넣어

이렇게 정렬시키는 방식 



Two-dimensional Arrays

행렬 
프로그래밍 언어에서는 행렬은 2-D 배열로 표현한다.

또 행과 열을 한번에 지정하지 않아도 상관없어 

Ex) int [][]arr= new int[3][];
이렇게 써도 상관없어

행이 3개 갖고있는 배열인 거임 

따라서 
for(int i=0;i<3;i++){
	arr[i]= new int[i+1]; 이런식으로 만들기 가능함 
}





